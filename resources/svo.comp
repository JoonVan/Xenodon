#version 450

struct Rect {
    ivec2 offset;
    uvec2 extent;
};

struct Node {
    uint children[8];
    uint color;
    uint is_leaf_depth;
};

struct RenderParameters {
    float density;
};

layout(local_size_x = 8, local_size_y = 8) in;

layout(push_constant) uniform PushConstant {
    float time;
} push;

layout(binding = 0) readonly uniform UniformBuffer {
    Rect output_region;
    Rect display_region;
    RenderParameters params;
} uniforms;

layout(binding = 1, rgba8) restrict writeonly uniform image2D render_target;

layout(binding = 2) readonly buffer Octree {
    Node nodes[];
} model;

const uint LEAF = 1 << 31;
const float EPSILON = 0.0001;

vec3 ray(vec3 dir, vec3 up, vec2 uv) {
    uv -= 0.5;
    uv.y *= float(uniforms.display_region.extent.y) / float(uniforms.display_region.extent.x);

    vec3 right = normalize(cross(up, dir));
    up = normalize(cross(right, dir));

    return normalize(uv.x * right + uv.y * up + dir);
}

vec2 aabb_intersect(vec3 bmin, vec3 bmax, vec3 ro, vec3 rrd) {
    vec3 tbot = (bmin - ro) * rrd;
    vec3 ttop = (bmax - ro) * rrd;
    vec3 tmin = min(ttop, tbot);
    vec3 tmax = max(ttop, tbot);
    vec2 t = max(tmin.xx, tmin.yz);
    float t0 = max(t.x, t.y);
    t = min(tmax.xx, tmax.yz);
    float t1 = min(t.x, t.y);
    return vec2(t0, t1);
}

uint find(vec3 pos, out vec3 base, out float side) {
    float extent = 1.0;

    uint index = 0;
    vec3 offset = vec3(0);

    while (true) {
        if (model.nodes[index].is_leaf_depth >= LEAF) {
            base = offset;
            side = extent;
            return index;
        }

        extent *= 0.5;
        bvec3 mask = greaterThanEqual(pos, offset + extent);
        int child = int(dot(vec3(mask), vec3(4, 2, 1)));
        offset += vec3(mask) * vec3(extent);
        index = model.nodes[index].children[child];
    }
}

vec4 trace(vec3 ro, vec3 rd) {
    vec3 rrd = 1.0 / (rd + 0.0000000001); // Floating point infinities

    vec2 t = aabb_intersect(vec3(0), vec3(1), ro, rrd);
    if (t.y < 0) {
        return vec4(0);
    }

    t.x = max(t.x, 0);

    vec4 total = vec4(0);

    for (int i = 0; i < 500 && t.x + EPSILON < t.y; ++i) {
        vec3 p = (t.x + EPSILON) * rd + ro;
        vec3 offset;
        float side;
        uint node = find(p, offset, side);

        vec2 s = aabb_intersect(offset, offset + side, ro, rrd);
        t.x = s.y;

        vec4 color = unpackUnorm4x8(model.nodes[node].color);
        total += color * (s.y - s.x) * uniforms.params.density;
    }

    return total;
}

void main() {
    uvec2 index = gl_GlobalInvocationID.xy;

    if (any(greaterThanEqual(index, uniforms.output_region.extent))) {
        return;
    }

    ivec2 pixel = uniforms.output_region.offset + ivec2(index);
    vec2 uv = vec2(pixel - uniforms.display_region.offset) / vec2(uniforms.display_region.extent);

    float t = push.time * 1.2;
    vec3 center = vec3(0.5, 0.5, 0.5);

    vec3 ro = center + vec3(sin(t), 0, cos(t)) * 3;
    vec3 rd = normalize(center - ro);
    rd = ray(rd, vec3(0, 1, 0), uv);

    vec4 color = trace(ro, rd);

    imageStore(render_target, ivec2(index), vec4(color.rgb, 1));
}
