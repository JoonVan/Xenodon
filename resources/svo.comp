#version 450

#include "common.glsl"
#include "octree.glsl"

const float EPSILON = 0.0001;

vec2 aabb_intersect(vec3 bmin, vec3 bmax, vec3 ro, vec3 rrd) {
    vec3 tbot = (bmin - ro) * rrd;
    vec3 ttop = (bmax - ro) * rrd;
    vec3 tmin = min(ttop, tbot);
    vec3 tmax = max(ttop, tbot);
    vec2 t = max(tmin.xx, tmin.yz);
    float t0 = max(t.x, t.y);
    t = min(tmax.xx, tmax.yz);
    float t1 = min(t.x, t.y);
    return vec2(t0, t1);
}

uint find(vec3 pos, out vec3 base, out float side) {
    float extent = 1.0;

    uint index = 0;
    vec3 offset = vec3(0);

    while (true) {
        if (model.nodes[index].is_leaf_depth >= LEAF) {
            base = offset;
            side = extent;
            return index;
        }

        extent *= 0.5;
        bvec3 mask = greaterThanEqual(pos, offset + extent);
        int child = int(mask.x) * 4 + int(mask.y) * 2 + int(mask.z);
        offset += vec3(mask) * vec3(extent);
        index = model.nodes[index].children[child];
    }
}

vec4 trace(vec3 ro, vec3 rd) {
    vec3 rrd = 1.0 / (rd + 0.0000000001); // Floating point infinities

    vec2 t = aabb_intersect(vec3(0), vec3(1), ro, rrd);
    if (t.y < 0) {
        return vec4(0);
    }

    t.x = max(t.x, 0);

    vec4 total = vec4(0);

    for (int i = 0; i < 500 && t.x + EPSILON < t.y; ++i) {
        vec3 p = (t.x + EPSILON) * rd + ro;
        vec3 offset;
        float side;
        uint node = find(p, offset, side);

        vec2 s = aabb_intersect(offset, offset + side, ro, rrd);
        t.x = s.y;

        vec4 color = unpackUnorm4x8(model.nodes[node].color);
        total += color * (s.y - s.x) * uniforms.params.density;
    }

    return total;
}

void main() {
    uvec2 index = gl_GlobalInvocationID.xy;

    if (any(greaterThanEqual(index, uniforms.output_region.extent))) {
        return;
    }

    ivec2 pixel = uniforms.output_region.offset + ivec2(index);
    vec2 uv = vec2(pixel - uniforms.display_region.offset) / vec2(uniforms.display_region.extent);

    vec3 ro = push.camera.translation.xyz;
    vec3 rd = ray(push.camera.forward.xyz, push.camera.up.xyz, uv);

    ro /= uniforms.params.voxel_ratio.xyz;
    rd = normalize(rd / uniforms.params.voxel_ratio.xyz);

    vec4 color = trace(ro, rd);

    imageStore(render_target, ivec2(index), vec4(color.rgb, 1));
}
