#version 450

#include "common.glsl"
#include "octree.glsl"

vec3 trace(vec3 ro, vec3 rd) {
    vec3 rrd = 1.0 / rd;
    vec3 bias = rrd * ro;

    const uint cast_stack_depth = FLOAT_MANTISSA_BITS;
    int sp = 0;

    uint node_stack[cast_stack_depth];
    uint child_index_stack[cast_stack_depth];

    uint node = 0;
    uint child_idx = 0;

    vec3 pos = vec3(0);
    float side = 0.5;

    vec3 total = vec3(0);

    while (true) {
        uint child = model.nodes[node].children[child_idx];
        vec3 box_min = pos * rrd - bias;
        vec3 box_max = (pos + side) * rrd - bias;

        float t_min = max_elem(min(box_min, box_max));
        float t_max = min_elem(max(box_min, box_max));

        if (t_min < t_max && t_max > 0) {
            if (model.nodes[child].is_leaf_depth >= LEAF_MASK) {
                vec3 color = unpackUnorm4x8(model.nodes[child].color).rgb;
                total += color * (t_max - max(t_min, 0));
            } else {
                if (child_idx != 7) {
                    node_stack[sp] = node;
                    child_index_stack[sp] = child_idx;
                    ++sp;
                }

                side *= 0.5;
                node = child;
                child_idx = 0;
                continue;
            }
        }

        if (child_idx == 7) {
            --sp;
            if (sp < 0) {
                break;
            }

            node = node_stack[sp];
            child_idx = child_index_stack[sp];
            side = exp2(-float(model.nodes[node].is_leaf_depth & DEPTH_MASK)) * 0.5;
        }

        pos -= mod(pos, side * 2.0);
        ++child_idx;
        pos += mix(vec3(0), vec3(side), notEqual(uvec3(child_idx) & uvec3(4, 2, 1), uvec3(0)));
    }

    return total;
}

void main() {
    uvec2 index = gl_GlobalInvocationID.xy;

    if (any(greaterThanEqual(index, uniforms.output_region.extent))) {
        return;
    }

    ivec2 pixel = uniforms.output_region.offset + ivec2(index);
    vec2 uv = vec2(pixel - uniforms.display_region.offset) / vec2(uniforms.display_region.extent);

    vec3 ro = push.camera.translation.xyz;
    vec3 rd = ray(uv);

    vec3 color = trace(ro, rd) * voxel_emission_coeff(rd);

    imageStore(render_target, ivec2(index), vec4(color, 1));
}
