#version 450

#include "common.glsl"

// Implementation of 'A Fast Voxel Traversal Algorithm for Ray Tracing' by Amanatides & Woo

layout(binding = 2) uniform sampler3D model;

const int STEPS = 7000;

vec3 get_voxel(ivec3 p) {
    return texelFetch(model, p, 0).rgb;
}

vec3 trace(vec3 ro, vec3 rd) {
    vec3 rrd = 1.0 / rd;
    vec3 bias = rrd * ro;

    vec3 box_min = -bias;
    vec3 box_max = uniforms.params.model_dim.xyz * rrd - bias;

    float t_min = max_elem(min(box_min, box_max));
    float t_max = min_elem(max(box_min, box_max));

    if (t_min > t_max) {
        // Ray misses bounding cube
        return vec3(0);
    }

    t_min = max(t_min, 0);

    ro += rd * t_min;
    ivec3 pos = ivec3(ro);

    vec3 t_delta = abs(rrd);
    vec3 sgn = sign(rd);
    ivec3 step = ivec3(sgn);
    vec3 side_dist = (sgn * (floor(ro) - ro + 0.5) + 0.5) * t_delta;

    float t = t_min;

    vec3 total = vec3(0);
    while (t <= t_max) {
        bvec3 mask = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy));

        float t0 = min_elem(side_dist);
        total += texelFetch(model, pos, 0).rgb * (t0 - t);
        t = t0;

        side_dist += mix(vec3(0), t_delta, mask);
        pos += mix(ivec3(0), step, mask);
    }

    return total;
}

void main() {
    uvec2 index = gl_GlobalInvocationID.xy;

    if (any(greaterThanEqual(index, uniforms.output_region.extent))) {
        return;
    }

    ivec2 pixel = uniforms.output_region.offset + ivec2(index);
    vec2 uv = vec2(pixel - uniforms.display_region.offset) / vec2(uniforms.display_region.extent);

    float side = max_elem(vec3(textureSize(model, 0)));
    vec3 ro = push.camera.translation.xyz * side;
    vec3 rd = ray(uv);

    float ec = voxel_emission_coeff(rd) / side;
    vec3 color = trace(ro, rd) * ec;

    imageStore(render_target, ivec2(index), vec4(color, 1));
}
